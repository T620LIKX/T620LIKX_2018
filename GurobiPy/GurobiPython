from gurobipy import *
import pickle
import psycopg2

def connect_to_database(host, dbname, username, pw):
    conn_string = "host='{}' dbname='{}' user='{}' password='{}'".format(host, dbname, username, pw)

    try:
        conn = psycopg2.connect(conn_string)
    except psycopg2.OperationalError as e:
        print('Connection failed!')
        print('Error message:', e)
        exit()

    cursor = conn.cursor()

    return cursor, conn


def calculate_conflict_penalty(c):
    return c


cursor, conn = connect_to_database('localhost', 'likanx','postgres', 'postgres')

select_course_ids = """select id
from courses
where semester_type = {} and department_id = {}
order by id;"""

select_conflicts = """select tmp.course1, tmp.course2, count(tmp.student_id)
from (select e1.student_id as student_id, e1.course_id as course1, e2.course_id as course2
      from enrollment e1, enrollment e2, courses c1, courses c2
      where e1.student_id = e2.student_id
      and e1.course_id < e2.course_id
      and e1.course_id = c1.id and e2.course_id = c2.id
      and c1.semester_type = c2.semester_type
      and c2.semester_type = {}
      and c1.department_id = {} and c2.department_id = {}) tmp
group by tmp.course1, tmp.course2
order by tmp.course1, tmp.course2;"""

cursor.execute( select_course_ids.format(20171,4))
thecoursedata = cursor.fetchall()

cursor.execute( select_conflicts.format(20171, 4, 4) )
thedata = cursor.fetchall()

id_database_to_glpk = {}
id_glpk_to_database = {}

counter = 1
for i in thecoursedata:
    id_database_to_glpk[i[0]] = counter
    id_glpk_to_database[counter] = i[0]
    counter = counter + 1

conflict_matrix = [[0 for _ in range(1+len(thecoursedata))] for _ in range(1+len(thecoursedata))]

for i in thedata:
    course_1 = id_database_to_glpk[ i[0] ]
    course_2 = id_database_to_glpk[ i[1] ]
    conflict_penalty = calculate_conflict_penalty(i[2])
    conflict_matrix[course_1][course_2] = conflict_penalty
    conflict_matrix[course_2][course_1] = conflict_penalty

#----------- Gurobi model --------------------

m = Model("Timetable")

C = 3
T = 4
S = 2


TotalLectures = tuplelist([2, 2, 3])
Course100Limit = 2
Course80Limit = 8
Course60Limit = 14

x = m.addVars(C, T, vtype = GRB.BINARY)
y = m.addVars(C, C, vtype = GRB.BINARY)

PlanCoursesTotal = m.addConstrs((x[(c,t)] == TotalLectures[c] for t in range(int(T/2)) for c in range(C)), name = 'PlanCoursesTotal')

PlanCoursesI = m.addConstrs((x[(c,t)] >= 1 for t in range(int(T/2)) for c in range(C)), name = 'PlanCoursesI')
PlanCoursesII = m.addConstrs((x[(c,t)] >= 1 for t in range(int(T/2 + 1)) for c in range(C)), name = 'PlanCoursesII')
NoConflicts = m.addConstrs((x[(c1,t)] + x[(c2,t)] <= 1 + y[(c1,c2)] for t in range(T) for c1 in range(C) for c2 in range(C)), name = 'NoConflicts')
RoomsAv = m.addConstrs((x[(c,t)] <= S for c in range(C) for t in range(T)), name = 'RoomsAv')



goal1 = quicksum(conflict_matrix[c1][c2]*y[(c1,c2)] for c1 in range(C) for c2 in range(C))
goal2 = quicksum(conflict_penalty*x[(c,t)] for c in range(C) for t in range(T))
obj = m.setObjective(goal1 + goal2, GRB.MAXIMIZE)

m.optimize()