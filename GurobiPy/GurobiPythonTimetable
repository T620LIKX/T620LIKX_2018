from gurobipy import *
import pickle
import psycopg2

semestercode = 20171
departments = '3,4'

def connect_to_database(host, dbname, username, pw):
    conn_string = "host='{}' dbname='{}' user='{}' password='{}'".format(host, dbname, username, pw)

    try:
        conn = psycopg2.connect(conn_string)
    except psycopg2.OperationalError as e:
        print('Connection failed!')
        print('Error message:', e)
        exit()

    cursor = conn.cursor()

    return cursor, conn


def calculate_conflict_penalty(c):
    if c <= 10:
        return c
    elif c <= 20:
        return c*2
    elif c <= 40:
        return c*3
    elif c <= 100:
        return c*4
    elif c > 100:
        return c*5 


cursor, conn = connect_to_database('localhost', 'likanx','postgres', 'postgres')

select_course_ids = """select c.id, count(e.student_id), 2 as lectures
from courses c, enrollment e
where semester_type = {} and department_id in ({})
and c.id = e.course_id
group by c.id
order by c.id;"""


select_conflicts = """select tmp.course1, tmp.course2, count(tmp.student_id)
from (select e1.student_id as student_id, e1.course_id as course1, e2.course_id as course2
      from enrollment e1, enrollment e2, courses c1, courses c2
      where e1.student_id = e2.student_id
      and e1.course_id < e2.course_id
      and e1.course_id = c1.id and e2.course_id = c2.id
      and c1.semester_type = c2.semester_type
      and c2.semester_type = {}
      and c1.department_id in ({}) and c2.department_id in ({})) tmp
group by tmp.course1, tmp.course2
order by tmp.course1, tmp.course2;"""



cursor.execute( select_course_ids.format(semestercode, departments))
thecoursedata = cursor.fetchall()

cursor.execute( select_conflicts.format(semestercode, departments, departments) )
thedata = cursor.fetchall()

id_database_to_glpk = {}
id_glpk_to_database = {}

counter = 0
for i in thecoursedata:
    id_database_to_glpk[i[0]] = counter
    id_glpk_to_database[counter] = i[0]
    counter = counter + 1

conflict_matrix = [[0 for _ in range(1+len(thecoursedata))] for _ in range(1+len(thecoursedata))]

for i in thedata:
    course_1 = id_database_to_glpk[ i[0] ]
    course_2 = id_database_to_glpk[ i[1] ]
    conflict_penalty = calculate_conflict_penalty(i[2])
    conflict_matrix[course_1][course_2] = conflict_penalty
    conflict_matrix[course_2][course_1] = conflict_penalty


#----------- Gurobi Timetable model --------------------

m = Model("Timetable")

m.setParam(GRB.Param.TimeLimit, 150.0)

C = len(thecoursedata)
T = 16
S = 55
TotalLectures = 2

Course100Limit = 2
Course80Limit = 8
Course60Limit = 14

LargeCourse100 = tuplelist([3, 4, 5, 6, 7, 8, 10, 11, 13, 17])
LargeCourse80 = tuplelist([3, 4, 5, 6, 7, 8, 10, 11, 13, 17])
LargeCourse60 = tuplelist([3, 4, 5, 6, 7, 8, 10, 11, 13, 17])

x = m.addVars(C, T, vtype = GRB.BINARY, name = 'x')
y = m.addVars(C, C, vtype = GRB.BINARY, name = 'y')


PlanCoursesTotal = m.addConstrs((quicksum(x[(c,t)] for t in range(T)) == TotalLectures
																for c in range(C)), name = 'PlanCoursesTotal')

PlanCoursesI = m.addConstrs((quicksum(((x[(c,t)] for t in range(int(T/2))))) >= 1  for c in range(C)), name = 'PlanCoursesI')
PlanCoursesII = m.addConstrs((quicksum(((x[(c,t)] for t in range(int(T/2 + 1), T)))) >= 1  for c in range(C)), name = 'PlanCoursesII')
NoConflicts = m.addConstrs((x[(c1,t)] + x[(c2,t)] <= 1 + y[(c1,c2)] for t in range(T) 
																	for c1 in range(C)
																	for c2 in range(C)
																	if c1 != c2), name = 'NoConflicts')
RoomsAv = m.addConstrs((quicksum(x[(c,t)] for c in range(C)) <= S
									 	for t in range(T)), name = 'RoomsAv')

S100 = m.addConstrs((quicksum(x[(c,t)] for c in LargeCourse100) <= Course100Limit for t in range(T)), name = 'S100')
S80 = m.addConstrs((quicksum(x[(c,t)] for c in LargeCourse80) <= Course80Limit for t in range(T)), name = 'S80')
S60 = m.addConstrs((quicksum(x[(c,t)] for c in LargeCourse60) <= Course60Limit for t in range(T)), name = 'S60')

goal1 = quicksum(conflict_matrix[c1][c2]*y[(c1,c2)] for c1 in range(C)
													for c2 in range(C)
													if c1 != c2)
goal2 = quicksum(conflict_penalty*x[(c,t)] for c in range(C)
											for t in range(T))

obj = m.setObjective(goal1, GRB.MINIMIZE)

m.optimize()

#m.write('solutionLikan.lp')
#m.write('solutionLikan.sol')

#for v in m.getVars():
#        print('%s %g' % (v.varName, v.x))

print('Obj: %g' % m.objVal)


#--------------- Solution to database ---------------------


solution_id = 1
select_max_solution_id = "select max(solution_id) from solutions;"
cursor.execute(select_max_solution_id)
max_solution_id = cursor.fetchall()
if max_solution_id[0][0] is not None:
    solution_id = 1 + max_solution_id[0][0]

insert_solution = "insert into solutions (solution_id, solution_type, course_id, timeslot) values ({},'timetable',{},{});"

variables = m.getVars()
for v in variables:
    if v.x > 0.99 and v.varName[0] == 'x':
    	course_id = int(v.varName.split('[')[1].split(']')[0].split(',')[0])
    	database_course_id = id_glpk_to_database[ course_id ]
    	timeslot = int(v.varname.split('[')[1].split(']')[0].split(',')[1])
    	print('Course {} is in timeslot {}'.format(database_course_id, timeslot))
    	cursor.execute(insert_solution.format(solution_id, database_course_id, timeslot))

conn.commit()
conn.close()